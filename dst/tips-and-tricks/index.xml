<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tips-and-tricks on Material Docs</title>
    <link>http://demo.devcenter.bitrise.io.s3-website-us-east-1.amazonaws.com/tips-and-tricks/</link>
    <description>Recent content in Tips-and-tricks on Material Docs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="http://demo.devcenter.bitrise.io.s3-website-us-east-1.amazonaws.com/tips-and-tricks/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>http://demo.devcenter.bitrise.io.s3-website-us-east-1.amazonaws.com/tips-and-tricks/android-tips-and-tricks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://demo.devcenter.bitrise.io.s3-website-us-east-1.amazonaws.com/tips-and-tricks/android-tips-and-tricks/</guid>
      <description>What are Gradle tasks and how can I get the list of available tasks in my project? A gradle task is a process you can run with gradle. You can run these tasks by running gradle TASK-TO-RUN in your Command Line / Terminal.
A standard Android Gradle project includes a lot of tasks by default, things like:
 androidDependencies - Displays the Android dependencies of the project. assemble - Assembles all variants of all applications and secondary packages.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://demo.devcenter.bitrise.io.s3-website-us-east-1.amazonaws.com/tips-and-tricks/attach-any-file-to-build/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://demo.devcenter.bitrise.io.s3-website-us-east-1.amazonaws.com/tips-and-tricks/attach-any-file-to-build/</guid>
      <description>For this example we&amp;rsquo;ll attach the OS X system.log to the Build as an Artifact, but this works for any file, even for ones that you generate during the build, you just have to replace the example path we use (/var/log/system.log) with the path you want to deploy. You can of course use Environment Variables in the path too, like $HOME/.
Deployed Artifacts appear on the Build&amp;rsquo;s page, in the Artifacts &amp;amp; Apps section, and anyone who has access to the Build page can download it from there.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://demo.devcenter.bitrise.io.s3-website-us-east-1.amazonaws.com/tips-and-tricks/disable-a-step-by-condition/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://demo.devcenter.bitrise.io.s3-website-us-east-1.amazonaws.com/tips-and-tricks/disable-a-step-by-condition/</guid>
      <description>Disable a Step If you don&amp;rsquo;t want to remove the Step from your Workflow and you don&amp;rsquo;t want to duplicate the Workflow either (which is the preferred way if you want to experiment with new things; you can just create a &amp;ldquo;backup&amp;rdquo; clone of your original Workflow) then you can simply disable a Step by specifying run_if: false .
Example:
- script: run_if: false inputs: - content: |- #!/bin/bash echo &amp;quot;This will never run, because of run_if:false&amp;quot;  Run a Step only in CI environment, skip it for local builds This is quite similar to how you completely disable a step, but instead of specifying false as the run_if expression, you specify .</description>
    </item>
    
    <item>
      <title></title>
      <link>http://demo.devcenter.bitrise.io.s3-website-us-east-1.amazonaws.com/tips-and-tricks/dont-mark-build-failed-if-step-fails/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://demo.devcenter.bitrise.io.s3-website-us-east-1.amazonaws.com/tips-and-tricks/dont-mark-build-failed-if-step-fails/</guid>
      <description>To do this you have to switch to bitrise.yml mode (open the Workflow Editor on bitrise.io -&amp;gt; left side: click on bitrise.yml to switch to the interactive bitrise.yml editor).
All you have to do is: add an is_skippable: true flag to the Step.
An example script step which, although fails, it won&amp;rsquo;t &amp;ldquo;break&amp;rdquo; the build:
- script: is_skippable: true inputs: - content: |- #!/bin/bash echo &amp;quot;Failing Step.&amp;quot; exit 1 # exit 1 would mark this step as Failed, but it won&#39;t break the Build # because of the is_skippable: true flag / property  You can find more examples on GitHub.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://demo.devcenter.bitrise.io.s3-website-us-east-1.amazonaws.com/tips-and-tricks/expose-environment-variable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://demo.devcenter.bitrise.io.s3-website-us-east-1.amazonaws.com/tips-and-tricks/expose-environment-variable/</guid>
      <description>You can expose Environment Variables from one Step, to make it available for every other Step performed after the Step during the build. An example might be that you want to generate a release note which you want to use in a message or deploy step. Exposing environment variables is really easy, you just have to use envman if you want to make it available for every other Step.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://demo.devcenter.bitrise.io.s3-website-us-east-1.amazonaws.com/tips-and-tricks/install-additional-tools/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://demo.devcenter.bitrise.io.s3-website-us-east-1.amazonaws.com/tips-and-tricks/install-additional-tools/</guid>
      <description>If you need something you can&amp;rsquo;t find a Step for, you can always install &amp;amp; use tools with scripts or Script steps.
Just add a Script step to your Workflow, and either write your script there, or run a script from your repository.
Passwordless sudo is enabled on all of our build virtual machines, so you can freely use sudo if you need it.
Once you have a working script, you can also transform it into a Step and optionally share it with others (through our StepLib).</description>
    </item>
    
    <item>
      <title></title>
      <link>http://demo.devcenter.bitrise.io.s3-website-us-east-1.amazonaws.com/tips-and-tricks/optimize-your-build-times/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://demo.devcenter.bitrise.io.s3-website-us-east-1.amazonaws.com/tips-and-tricks/optimize-your-build-times/</guid>
      <description>You can improve your build times with the following tips.
Feel free to suggest other ways of optimization!
Include your dependencies in your repository Including your dependencies (like CocoaPods) in your repository can speed up your builds. Once the git clone of your repository is done, everything will be in place to do your build.
For example, in case of CocoaPods, you can delete the CocoaPods Install step from your workflow if you include your Pods directory and the CocoaPods generated .</description>
    </item>
    
    <item>
      <title></title>
      <link>http://demo.devcenter.bitrise.io.s3-website-us-east-1.amazonaws.com/tips-and-tricks/skip-a-build/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://demo.devcenter.bitrise.io.s3-website-us-east-1.amazonaws.com/tips-and-tricks/skip-a-build/</guid>
      <description>If you want to skip a specific commit, to not to start a build, all you have to do is to include either [skip ci] or [ci skip] in the commit message.
For example, the commit message:
This is not important, please [skip ci]  won&amp;rsquo;t start a build, nor will:
I just changed the README [ci skip]  !!! warning &amp;ldquo;Only the head/last commit message is checked!&amp;rdquo; If you push more than one commit, only the last (&amp;ldquo;head&amp;rdquo;) commit&amp;rsquo;s message will be checked for the skip ci pattern!</description>
    </item>
    
    <item>
      <title></title>
      <link>http://demo.devcenter.bitrise.io.s3-website-us-east-1.amazonaws.com/tips-and-tricks/use-bitrise-yml-from-repository/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://demo.devcenter.bitrise.io.s3-website-us-east-1.amazonaws.com/tips-and-tricks/use-bitrise-yml-from-repository/</guid>
      <description>Storing the build configuration (bitrise.yml) in your repository can be a great idea. It has its own PROs and CONs of course, so you have to decide it yourself whether this solution is a good fit for your project or not.
Things to keep in mind! You can find a discussion about what are the advantages and disadvantages of this approach on GitHub. To highlight a few things to keep in mind if you&amp;rsquo;d want to store and use the bitrise.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://demo.devcenter.bitrise.io.s3-website-us-east-1.amazonaws.com/tips-and-tricks/write-your-own-scanner/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://demo.devcenter.bitrise.io.s3-website-us-east-1.amazonaws.com/tips-and-tricks/write-your-own-scanner/</guid>
      <description>Write your own project scanner When you add a new app on bitrise, it will run a project-scanner step to figure out the project&amp;rsquo;s type and generate a configuration based on the type. Same functionality exist as a bitrise cli plugin.
Both the step and the plugin uses our shared bitrise-init tool, which is responsible for detecting project type and generating the raleted bitrise configuration (bitrise.yml).
bitrise-init tool is open source and designed to easily add new project type support.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://demo.devcenter.bitrise.io.s3-website-us-east-1.amazonaws.com/tips-and-tricks/xcodebuild-export-options/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://demo.devcenter.bitrise.io.s3-website-us-east-1.amazonaws.com/tips-and-tricks/xcodebuild-export-options/</guid>
      <description>If you create a new iOS app on bitrise.io the generated default workflow wil include our Xcode Archive step. This step can manage to archive and export your iOS app.
A bit of history and technical info If the step is used with Xcode 6 it&amp;rsquo;ll generate the following (legacy) command to export the ipa of your app (you can see it in the step&amp;rsquo;s log):
xcodebuild -exportArchive \ -exportFormat ipa \ -archivePath &amp;quot;/var/folders/lb/8n5bn9k975qgw662jpqdy7mm0000gn/T/bitrise-xcarchive.</description>
    </item>
    
  </channel>
</rss>